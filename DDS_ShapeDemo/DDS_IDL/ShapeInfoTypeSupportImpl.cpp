/* Generated by D:\Study\openDDS\OpenDDS-DDS\bin\opendds_idl version 3.12.2 (ACE version 6.5.0) running on input file ShapeInfo.idl */
#include "ShapeInfoTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: ShapeDemo */



/* Begin STRUCT: ShapeInfo */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const ShapeDemo::ShapeInfo& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.shapeType.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.posX);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.posY);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.directionX);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.directionY);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.color);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.size);
}

bool operator<<(Serializer& strm, const ShapeDemo::ShapeInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.shapeType.in())
    && (strm << stru.id)
    && (strm << stru.posX)
    && (strm << stru.posY)
    && (strm << stru.directionX)
    && (strm << stru.directionY)
    && (strm << stru.color)
    && (strm << stru.size);
}

bool operator>>(Serializer& strm, ShapeDemo::ShapeInfo& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.shapeType.out())
    && (strm >> stru.id)
    && (strm >> stru.posX)
    && (strm >> stru.posY)
    && (strm >> stru.directionX)
    && (strm >> stru.directionY)
    && (strm >> stru.color)
    && (strm >> stru.size);
}

size_t gen_max_marshaled_size(const ShapeDemo::ShapeInfo& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const ShapeDemo::ShapeInfo> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const ShapeDemo::ShapeInfo> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const ShapeDemo::ShapeInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<ShapeDemo::ShapeInfo> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace ShapeDemo {
::DDS::DataWriter_ptr ShapeInfoTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ShapeInfo> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr ShapeInfoTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ShapeInfo> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ShapeInfoTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ShapeInfo> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ShapeInfo, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ShapeInfoTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ShapeInfo>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool ShapeInfoTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* ShapeInfoTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
ShapeInfoTypeSupport::_ptr_type ShapeInfoTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<ShapeDemo::ShapeInfo> : MetaStruct {
  typedef ShapeDemo::ShapeInfo T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const ShapeDemo::ShapeInfo& typed = *static_cast<const ShapeDemo::ShapeInfo*>(stru);
    if (std::strcmp(field, "shapeType") == 0) {
      return typed.shapeType.in();
    }
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "posX") == 0) {
      return typed.posX;
    }
    if (std::strcmp(field, "posY") == 0) {
      return typed.posY;
    }
    if (std::strcmp(field, "directionX") == 0) {
      return typed.directionX;
    }
    if (std::strcmp(field, "directionY") == 0) {
      return typed.directionY;
    }
    if (std::strcmp(field, "color") == 0) {
      return typed.color;
    }
    if (std::strcmp(field, "size") == 0) {
      return typed.size;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ShapeDemo::ShapeInfo)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "shapeType") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'shapeType' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'shapeType' length could not be deserialized");
      }
      if (!ser.skip(len)) {
        throw std::runtime_error("String 'shapeType' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (std::strcmp(field, "posX") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'posX' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'posX' could not be skipped");
      }
    }
    if (std::strcmp(field, "posY") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'posY' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'posY' could not be skipped");
      }
    }
    if (std::strcmp(field, "directionX") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'directionX' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'directionX' could not be skipped");
      }
    }
    if (std::strcmp(field, "directionY") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'directionY' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'directionY' could not be skipped");
      }
    }
    if (std::strcmp(field, "color") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'color' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'color' could not be skipped");
      }
    }
    if (std::strcmp(field, "size") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'size' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'size' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct ShapeDemo::ShapeInfo");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "shapeType") == 0) {
      return make_field_cmp(&T::shapeType, next);
    }
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "posX") == 0) {
      return make_field_cmp(&T::posX, next);
    }
    if (std::strcmp(field, "posY") == 0) {
      return make_field_cmp(&T::posY, next);
    }
    if (std::strcmp(field, "directionX") == 0) {
      return make_field_cmp(&T::directionX, next);
    }
    if (std::strcmp(field, "directionY") == 0) {
      return make_field_cmp(&T::directionY, next);
    }
    if (std::strcmp(field, "color") == 0) {
      return make_field_cmp(&T::color, next);
    }
    if (std::strcmp(field, "size") == 0) {
      return make_field_cmp(&T::size, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ShapeDemo::ShapeInfo)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"shapeType", "id", "posX", "posY", "directionX", "directionY", "color", "size", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "shapeType") == 0) {
      return &static_cast<const T*>(stru)->shapeType;
    }
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "posX") == 0) {
      return &static_cast<const T*>(stru)->posX;
    }
    if (std::strcmp(field, "posY") == 0) {
      return &static_cast<const T*>(stru)->posY;
    }
    if (std::strcmp(field, "directionX") == 0) {
      return &static_cast<const T*>(stru)->directionX;
    }
    if (std::strcmp(field, "directionY") == 0) {
      return &static_cast<const T*>(stru)->directionY;
    }
    if (std::strcmp(field, "color") == 0) {
      return &static_cast<const T*>(stru)->color;
    }
    if (std::strcmp(field, "size") == 0) {
      return &static_cast<const T*>(stru)->size;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ShapeDemo::ShapeInfo)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "shapeType") == 0) {
      static_cast<T*>(lhs)->shapeType = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "posX") == 0) {
      static_cast<T*>(lhs)->posX = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "posY") == 0) {
      static_cast<T*>(lhs)->posY = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "directionX") == 0) {
      static_cast<T*>(lhs)->directionX = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "directionY") == 0) {
      static_cast<T*>(lhs)->directionY = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "color") == 0) {
      static_cast<T*>(lhs)->color = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "size") == 0) {
      static_cast<T*>(lhs)->size = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ShapeDemo::ShapeInfo)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "shapeType") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->shapeType.in(), static_cast<const T*>(rhs)->shapeType.in());
    }
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "posX") == 0) {
      return static_cast<const T*>(lhs)->posX == static_cast<const T*>(rhs)->posX;
    }
    if (std::strcmp(field, "posY") == 0) {
      return static_cast<const T*>(lhs)->posY == static_cast<const T*>(rhs)->posY;
    }
    if (std::strcmp(field, "directionX") == 0) {
      return static_cast<const T*>(lhs)->directionX == static_cast<const T*>(rhs)->directionX;
    }
    if (std::strcmp(field, "directionY") == 0) {
      return static_cast<const T*>(lhs)->directionY == static_cast<const T*>(rhs)->directionY;
    }
    if (std::strcmp(field, "color") == 0) {
      return static_cast<const T*>(lhs)->color == static_cast<const T*>(rhs)->color;
    }
    if (std::strcmp(field, "size") == 0) {
      return static_cast<const T*>(lhs)->size == static_cast<const T*>(rhs)->size;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ShapeDemo::ShapeInfo)");
  }
};

template<>
const MetaStruct& getMetaStruct<ShapeDemo::ShapeInfo>()
{
  static MetaStructImpl<ShapeDemo::ShapeInfo> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, ShapeDemo::ShapeInfo*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<ShapeDemo::ShapeInfo>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ShapeInfo */

/* End MODULE: ShapeDemo */
